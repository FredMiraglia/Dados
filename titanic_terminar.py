# -*- coding: utf-8 -*-
"""Titanic_terminar.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1i7sm3mmuXVZuPBbWQYHGxZuhrxZupBQ9
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix,classification_report
import warnings
warnings.filterwarnings('ignore')

from imblearn.over_sampling import SMOTE

train = pd.read_csv('train.csv')
test = pd.read_csv('test.csv')

train.head()

train.tail()

test.head()

sns.heatmap(train.isna())

sns.heatmap(test.isna())

#sns.boxplot(data=train, x='Pclass', y='Age', hue='Sex')

train.info()

train.drop('Cabin', axis=1, inplace=True)

test.drop('Cabin', axis=1, inplace=True)

idade_sexo = train[['Pclass','Sex','Age']].groupby(['Pclass','Sex']).agg('mean').reset_index()
display(idade_sexo)
plt.bar(data=idade_sexo, x='Sex', height='Age', color=['red','blue'])
plt.ylabel("idade")
plt.xlabel('Sexo')
plt.title("MÃ©dia de idade por sexo")
plt.show()

def Media_idade(col):
    idade = col[0]
    classe = col[1]
    sexo = col[2]
    if pd.isnull(idade):
        if classe == 1:
            if sexo =="female":
                return 34.611
            else:
                return 41.28
        elif classe == 2:
            if sexo =="female":
                return 	28.722973
            else:
                return 30.740707

        elif classe == 3:
            if sexo =="female":
                return 21.750000
            else:
                return 26.507589
    else:
        return idade

train.Age = train[[ 'Age','Pclass','Sex',]].apply(Media_idade, axis=1)

train.Age

train.Age.isnull().sum()

test.Age = train[[ 'Age','Pclass','Sex',]].apply(Media_idade, axis=1)

test.Age.isnull().sum()

train.isnull().sum()

train.drop(['Embarked','Name','Ticket','PassengerId'], axis=1, inplace=True)

test.drop(['Embarked','Name','Ticket'], axis=1, inplace=True)

train.head()

sns.pairplot(train, hue='Survived')

sns.countplot(data=train, x='Survived')

sns.countplot(data=train, x='Survived',hue='Sex' )

sns.boxplot(data=train, y='Age')

sns.boxplot(data=train, y='Age', x='Pclass')

sns.boxplot(data=train, y='Age', x='Pclass',hue='Sex')

X =train.drop('Survived', axis=1)
y = train['Survived']

X['Sex'] = X['Sex'].replace(['male','female'],[0,1])

from sklearn.preprocessing import MinMaxScaler

scale = MinMaxScaler()
scale.fit_transform(X)

oversample = SMOTE()
X, y = oversample.fit_resample(X, y)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33333333)

from sklearn.tree import ExtraTreeClassifier
arvore_model = ExtraTreeClassifier()
arvore_model.fit(X_train,y_train)
pred_arvore = arvore_model.predict(X_test)

from sklearn.metrics import classification_report, confusion_matrix
print(classification_report(y_test,pred_arvore))
print(confusion_matrix(y_test,pred_arvore))

from xgboost import XGBRFClassifier

XG = XGBRFClassifier()
XG.fit(X_train,y_train)
pred_XG = XG.predict(X_test)

print(classification_report(y_test,pred_XG))
print(confusion_matrix(y_test,pred_XG))

from sklearn.linear_model import LogisticRegression
model_log = LogisticRegression()
model_log.fit(X_train, y_train)
pred_log = model_log.predict(X_test)

X_test

print(classification_report(y_test,pred_log))
print(confusion_matrix(y_test,pred_log))

from sklearn.neural_network import MLPClassifier
model_MLP = MLPClassifier(max_iter=10000)
model_MLP.fit(X_train, y_train)
pred_MLP = model_MLP.predict(X_test)

print(classification_report(y_test,pred_MLP))
print(confusion_matrix(y_test,pred_MLP))

"""--------------------------------------------------------------------"""

test